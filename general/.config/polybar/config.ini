; vim: foldmethod=marker foldlevel=0

include-file = ~/.config/polybar/colors.ini
include-directory = ~/.config/polybar/modules


; WM Settings {{{

[global/wm]
; Adjust the _NET_WM_STRUT_PARTIAL top value
; Used for top aligned bars
margin-bottom = 0

; Adjust the _NET_WM_STRUT_PARTIAL bottom value
; Used for bottom aligned bars
margin-top = 10

; }}}


;  Bar Settings {{{

[bar/main]
; ; defaults to the primary monitor if it exists
; monitor =
; monitor-fallback =

; Require the monitor to be in connected state
; XRandR sometimes reports my monitor as being disconnected (when in use)
monitor-strict = false

; Use fuzzy matching for monitors (only ignores dashes -)
; Useful when monitors are named differently with different drivers.
monitor-exact = true

; Tell the Window Manager not to configure the window.
; Use this to detach the bar if your WM is locking its size/position.
override-redirect = false

; Put the bar at the bottom of the screen
bottom = false

; Prefer fixed center position for the `modules-center` block
; When false, the center position will be based on the size of the other blocks.
fixed-center = true

; may be XX%, XX (pixels) or XX%:-XX, and perhaps XX%:+XX
width = 100%
; width = 98%
height = 20

; Offset the bar window in the x and/or y direction.
offset-x = 0%
; offset-x = 1%
offset-y = 0%
; offset-y = 2%:-3

; Background ARGB color (e.g. #f00, #ff992a, #ddff1023)
background = ${color.bg}
foreground = ${color.fg}

; Value used for drawing rounded corners (not compatible with border-size)
radius-top = 0.0
radius-bottom = 0.0

;;; Under-/overline pixel size and argb color
; underline-size = 
; underline-color = 
overline-size = 2
overline-color = ${color.ac}

; Values applied to all borders
; Individual side values can be defined using:
;   border-{left,top,right,bottom}-size
;   border-{left,top,right,bottom}-color
; The top and bottom borders are added to the bar height, so the effective
; window height is:
;   height + border-top-size + border-bottom-size
; Meanwhile the effective window width is defined entirely by the width key and
; the border is placed withing this area. So you effectively only have the
; following horizontal space on the bar:
;   width - border-right-size - border-left-size
border-bottom-size = 2
border-color = ${color.ac}

; Number of spaces to add at the beginning/end of the bar
; Individual side values can be defined using:
;   padding-{left,right}
padding = 0

; Number of spaces to add before/after each module
; Individual side values can be defined using:
;   module-margin-{left,right}
module-margin-left = 2
module-margin-right = 2

; Fonts are defined using <font-name>;<vertical-offset>
; Font names are specified using a fontconfig pattern.
font-0 = "Nimbus Sans:size=8;2"
font-1 = "icomoon\\-feather:size=8;2"
font-2 = "NotoSans Nerd Font:size=8;2"
font-3 = "Symbola:size=8;2"

; Modules are added to one of the available blocks
modules-left = launcher colors-switch workspaces
modules-center = mpd 
modules-right = updates battery pulseaudio brightness weather network-wifi network-eth date tray sysmenu

; The separator will be inserted between the output of each module
separator =

; Opacity value between 0.0 and 1.0 used on fade in/out
dim-value = 1.0

; Value to be used to set the WM_NAME atom
; If the value is empty or undefined, the atom value
; will be created from the following template: polybar-[BAR]_[MONITOR]
; NOTE: The placeholders are not available for custom values
wm-name = 

; Locale used to localize various module data (e.g. date)
; Expects a valid libc locale, for example: sv_SE.UTF-8
locale = 

; Put the bar above the selected window manager's root, to fix issues
; of having the bar being drawn on top of fullscreen windows
;
; Currently supported WM's:
;   generic (Tries the ewmh strategy and falls back to the bottom strategy)
;   bspwm   (Moves the bar window above all bspwm root windows)
;   bottom  (Works in xmonad, may not work on other WMs)
;   ewmh    (Moves the bar above the window specified in _NET_SUPPORTING_WM_CHECK)
;   i3      (requires `override-redirect = true`)
wm-restack = generic

; Whether polybar defines struts (_NET_WM_STRUT_PARTIAL and _NET_WM_STRUT)
enable-struts = true

; Set a DPI values used when rendering text
; This only affects scalable fonts
; Set this to 0 to let polybar calculate the dpi from the screen size.
; dpi-x = 
; dpi-y = 

; Enable support for inter-process messaging
; See the Messaging wiki page for more details.
enable-ipc = true

; Fallback click handlers that will be called if
; there's no matching module handler found.
click-left = 
click-middle = 
click-right =
scroll-up =
scroll-down =
double-click-left =
double-click-middle =
double-click-right =
; double-click-interval = 400

; Requires polybar to be built with xcursor support (xcb-util-cursor)
; Possible values are:
; - default   : The default pointer as before, can also be an empty string (default)
; - pointer   : Typically in the form of a hand
; - ns-resize : Up and down arrows, can be used to indicate scrolling
cursor-click = 
cursor-scroll = 

; }}}


; Application Settings {{{

[settings]

; Reload upon receiving XCB_RANDR_SCREEN_CHANGE_NOTIFY events
screenchange-reload = true

; Compositing operators
; @see: https://www.cairographics.org/manual/cairo-cairo-t.html#cairo-operator-t
compositing-background = source
compositing-foreground = over
compositing-overline = over
compositing-underline = over
compositing-border = over

;;; Define fallback values used by all module formats
; format-foreground = 
; format-background = 
; format-underline =
; format-overline =
; format-spacing =
; format-padding =
; format-margin =
; format-offset =

; Enables pseudo-transparency for the bar
; If set to true the bar can be transparent without a compositor.
pseudo-transparency = false

; }}}

